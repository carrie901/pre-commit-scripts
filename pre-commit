#!/usr/bin/python

def check_filenames(look_command):
  error = 0
  added_filenames = get_files_added_in_commit(look_command)
  for added_filename in added_filenames:
    if is_migration_file(added_filename):
      last_existing_file = get_last_existing_file_after(added_filename, added_filenames, look_command)
      if last_existing_file:
        sys.stderr.write("Error: The added file %s must have a filename \
alphabetically after the existing %s\n" % (added_filename, last_existing_file))
        error += 1
  return error

def is_migration_file(filename):
  return bool(get_migration_match(filename))

def get_migration_dir(filename):
  return get_migration_match(filename).group(1)

def get_migration_match(filename):
  import re
  return re.match("^(.*/db/migrations/)[0-9+].*\.rb$", filename)

def get_files_added_in_commit(look_command):
  def added(line):
    return line and line[0] == "A"
  def filename(line):
    return line[4:]
  return [filename(line) for line in get_changed_files(look_command) if added(line)]

def get_last_existing_file_after(filename, added_filenames, look_command):
  existing_files = get_existing_files_in(get_migration_dir(filename), added_filenames, look_command)
  existing_migrations = [f for f in existing_files if is_migration_file(f)]
  existing_migrations.sort()
  if filename < existing_migrations[-1]:
    return existing_migrations[-1]
  return None

def get_existing_files_in(path, added_filenames, look_command):
  all_files = command_output("%s %s" % (look_command % "tree --full-paths", path))
  return [filename for filename in all_files if filename not in added_filenames]
  
def get_changed_files(look_command):
  return command_output(look_command % "changed")

def command_output(cmd):
  "Captures a command's standard output."
  import subprocess
  return subprocess.Popen(cmd.split(), stdout=subprocess.PIPE).communicate()[0].split("\n")

def main():
  usage = """Usage: %prog REPO TXN

Run pre-commit verification on a repository transaction."""
  from optparse import OptionParser
  parser = OptionParser(usage=usage)
  parser.add_option("-r", "--revision",
                    help="Test mode. Specify a revision instead of a transaction.",
                    action="store_true", default=False)

  try:
    (options, (repos, transaction_or_revision)) = parser.parse_args()
    look_option = ("--transaction", "--revision")[options.revision]
    look_command = "svnlook %s %s %s %s" % ("%s", repos, look_option, transaction_or_revision)
    return check_filenames(look_command)
  except:

    parser.print_help()
    return 1

if __name__ == "__main__":
  import sys
  sys.exit(main())